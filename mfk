import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.linear_model import LinearRegression
import csv
import scipy.stats as stats

f = []
with open("C:/Users/neon6/Downloads/flights_NY.csv", 'r') as csvfile:
    csvreader = csv.reader(csvfile)
    for row in csvreader:
        if 'NA' not in row:
            f.append(row)

delay = f[0].index('dep_delay')
name = f[0].index('carrier')
dist = f[0].index('distance')
air_time = f[0].index('air_time')
reis = f[0].index('flight')
month = f[0].index('month')
dest = f[0].index('dest')

del f[0]

#3 problems
m = [[] for i in range(12)]
for i in f:
    m[int(i[month])-1].append(int(i[delay]))
a = [np.mean(m[i]) for i in range(12)]
ox = np.arange(1, 13)
for i in range(12):
    q = np.std(m[i])
    plt.plot([ox[i], ox[i]], [a[i]-2*q, a[i]+2*q], color = 'blue')
plt.scatter(ox, a, 10, color = 'red')
plt.xlabel('номер месяца')
plt.ylabel('задержка вылета')
plt.show()
print(stats.ttest_ind(m[0], m[1]))

# первая задача

a = {}
for i in f:
    n = i[name]
    d = i[delay]
    if n not in a:
        a[n] = [0, 0]
    if int(d) > 0:
        a[n][0] += 1
    elif int(d) <= 0:
        a[n][1] += 1

ox = []
oy = []

#poschitaem veroiatnost
for i in a.keys():
    v = 100*a[i][0]/(a[i][0] + a[i][1])
    ox.append(i)
    oy.append(v)

plt.bar(ox, oy)
plt.ylim(0, 100)
plt.xlabel('название авиакомпании')
plt.ylabel('вероятность положительной задержки рейса')
for i in range(len(oy)):
    plt.text(i, oy[i], str(oy[i])[:5]+'%', ha = 'center', va = 'bottom')
plt.show()

# 4 problems
x = []
y = []
for i in f:
    x.append(int(i[dist]))
    y.append(int(i[air_time]))


n = len(x)
mean_x, mean_y = sum(x)/n, sum(y)/n
cov_xy = (sum((x[k] - mean_x) * (y[k] - mean_y) for k in range(n))/ (n - 1))

var_x = sum((item - mean_x)**2 for item in x) / (n - 1)
var_y = sum((item - mean_y)**2 for item in y) / (n - 1)
std_x, std_y = var_x ** 0.5, var_y ** 0.5
r = cov_xy / (std_x * std_y)
#print('коэффициент корреляции:', r)

x = np.array(x).reshape((-1, 1))
model = LinearRegression().fit(x, y)
r_sq = model.score(x, y)
b, a = model.intercept_, model.coef_
plt.scatter(x, y, 5, color = 'blue')
plt.plot([0, 5000], [b, 5000*a[0] + b], color = 'red')
plt.xlabel('расстояние полета')
plt.ylabel('время полета')
t = 'y =' + str(a[0])[:5] + '*x +'+ str(b)[:5]
plt.text(3000, 100, t)
plt.show()

# 5 problem
y2 = []

for i in f:
    if -15 <= int(i[delay]) <= 15:
        y2.append(int(i[delay]))
y2.sort()
plt.hist(y2, bins = 31, density=True, color = 'blue')
sns.kdeplot(y2, bw_method=.8, color = 'red')
plt.xlim(-16, 16)
plt.show()
print(stats.norm.fit(y2))

#2 problem
d = []
k = 0
for i in f:
    if int(i[dist]) not in d: k += 1
    d.append(int(i[dist]))
d.sort()
d2 = list(set(d))
d2.sort()
t = len(d2)//3
a1 = d2[t-1]
a2 = d2[-t]
m1 = d.index(a1)
m2 = d.index(a2)
mini = d[:m1]
mini2 = sorted(list(set(mini)))
for i in mini2:
    plt.bar(i, mini.count(i), 10, color = 'green')
mid = d[m1: m2]
mid2 = sorted(list(set(mid)))
for i in mid2:
    plt.bar(i, mid.count(i), 10, color = 'yellow')
long = d[m2:]
long2 = sorted(list(set(long)))
for i in long2:
    plt.bar(i, long.count(i), 10, color = 'red')

plt.xlabel('расстояние перелета')
plt.ylabel('количество перелетов')
plt.show()

M = 0
for i in range(len(d2)-1):
    dif = d2[i+1] - d2[i]
    if dif > M: 
        M = dif
        Mi = d2[i+1]
long = d[d.index(Mi):]
long2 = sorted(list(set(long)))
for i in long2:
    plt.bar(i, long.count(i), 10, color = 'red')

M = 0
d2 = d2[:d2.index(Mi)]
for i in range(1, len(d2)-2):
    l = d2[i] - d2[i-1]
    r = d2[i+2] - d2[i+1]
    dif = d2[i+1] - d2[i]
    if dif > M and l < 50 and r < 50: 
        M = dif
        Mi = d2[i+1]
mid = d[d.index(Mi):d.index(long[0])]
mid2 = sorted(list(set(mid)))
for i in mid2:
    plt.bar(i, mid.count(i), 10, color = 'yellow')
mini = d[:d.index(mid[0])]
mini2 = sorted(list(set(mini)))
for i in mini2:
    plt.bar(i, mini.count(i), 10, color = 'green')

plt.xlabel('расстояние перелета')
plt.ylabel('количество перелетов')
plt.show()

kuda = set()
for i in f:
    if int(i[dist]) in long2:
        kuda.add(i[dest])
print(kuda)

zmini, zmid, zlong = 0, 0, 0
k1, k2, k3 = 0, 0, 0
for i in f:
    t = int(i[dist])
    if t in mini2:
        zmini += int(i[delay])
        k1 += 1
    elif t in mid2: 
        zmid += int(i[delay])
        k2 += 1
    else: 
        zlong += int(i[delay])
        k3 += 1
print(zmini/k1, zmid/k2, zlong/k3)
